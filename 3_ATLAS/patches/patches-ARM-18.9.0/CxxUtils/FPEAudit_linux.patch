--- FPEAudit_linux.icc	2014-11-11 18:06:49.759255848 +0200
+++ FPEAudit_linux1.icc	2014-11-14 12:31:14.674876922 +0200
@@ -314,7 +314,7 @@
 #endif /* !__x86_64__ */
     
 #endif
-
+/*
     void mask_fpe(void)
     {
       mask_x87();
@@ -328,7 +328,7 @@
       if (cpu_has_sse2())
         unmask_sse2();
     }
-    
+    */
     // printing of stacktrace including inlined functions. needs debug symbols
     // uses libbdf and libiberty from gdb, which currently seemed to have a
     // small memory leak (gdb 7.4.1)
@@ -339,89 +339,89 @@
       long nsize;
       char **matching;
       asection *text;
-      
-      Dl_info       info;
-      if (dladdr (address, &info) && info.dli_fname && info.dli_fname[0])
-        {
-          bfd_init();
-          ibfd = bfd_openr(info.dli_fname, NULL);
-	  
-          if (ibfd == NULL)
-            {
-              fprintf(stderr,"bfd_openr error\n");
-              return;
-            }
-	  
-          if (!bfd_check_format_matches(ibfd, bfd_object, &matching))
-            {
-              fprintf(stderr,"format_matches\n");
-              return;
-            }
-	  
-          nsize = bfd_get_symtab_upper_bound (ibfd);
-          symtab = (asymbol **)malloc(nsize);
-          /*nsyms =*/ bfd_canonicalize_symtab(ibfd, symtab);
-	  
-          text = bfd_get_section_by_name(ibfd, ".text");
-	  
-          long offset(0);
-          if(text)
-            offset = ((long)address) - text->vma;
-	  
-          if (strstr (info.dli_fname, ".so") != 0)
-            {
-              unsigned long libaddr = (unsigned long) info.dli_fbase;
-              unsigned long addr = (unsigned long)address;
-              if (text)
-                offset = addr - libaddr - text->vma;
-            }
-	  
-          if (offset > 0)
-            {
-              const char *file;
-              const char *func;
-              unsigned line;
-	      
-              bool first=true;
-              char   *realname(0);
-              int     status;
-	      
-              bool found = bfd_find_nearest_line(ibfd, text, symtab, offset, &file, &func, &line);
-	      
-              if ( found && file)
-                {
-                  do
-                    {
-                      // from http://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html
-                      realname = abi::__cxa_demangle(func ? func : info.dli_sname, 0, 0, &status);
-                      if ( realname )
-                        {
-                          if (print)
-                            fprintf(stderr,"%s : %s (%s,%u)\n",first ? "  in function" : "  included from", realname, file, line);
-                          else
-                            msg << ( first ? "  in function" : "  included from" ) << " : " << realname << " (" << file << ":" << line << ")\n";
-                        }
-                      else
-                        {
-                          if (print)
-                            fprintf(stderr,"%s : %s (%s,%u)\n", first ? "  in function" : "  included from", func ? func : info.dli_sname, file, line);
-                          else
-                            msg << ( first ? "  in function" : "  included from" ) << " : " << ( func ? func : info.dli_sname ) << " (" << file << ":" << line << ")\n";
-                        }
-                      free(realname);
-		      
-                      found = bfd_find_inliner_info (ibfd, &file, &func, &line);
-                      first=false;
-                    }
-                  while(found);
-                }
-            }
-          if (print)
-            fprintf(stderr,"  in library : %s",info.dli_fname);
-          else
-            msg << "  in library : " << info.dli_fname;
-          bfd_close(ibfd);
-        }
+//      
+//      Dl_info       info;
+//      if (dladdr (address, &info) && info.dli_fname && info.dli_fname[0])
+//        {
+//          bfd_init();
+//          ibfd = bfd_openr(info.dli_fname, NULL);
+//	  
+//          if (ibfd == NULL)
+//            {
+//              fprintf(stderr,"bfd_openr error\n");
+//              return;
+//            }
+//	  
+//          if (!bfd_check_format_matches(ibfd, bfd_object, &matching))
+//            {
+//              fprintf(stderr,"format_matches\n");
+//              return;
+//            }
+//	  
+//          nsize = bfd_get_symtab_upper_bound (ibfd);
+//          symtab = (asymbol **)malloc(nsize);
+//          /*nsyms =*/ bfd_canonicalize_symtab(ibfd, symtab);
+//	  
+//          text = bfd_get_section_by_name(ibfd, ".text");
+//	  
+//          long offset(0);
+//          if(text)
+//            offset = ((long)address) - text->vma;
+//	  
+//          if (strstr (info.dli_fname, ".so") != 0)
+//            {
+//              unsigned long libaddr = (unsigned long) info.dli_fbase;
+//              unsigned long addr = (unsigned long)address;
+//              if (text)
+//                offset = addr - libaddr - text->vma;
+//            }
+//	  
+//          if (offset > 0)
+//            {
+//              const char *file;
+//              const char *func;
+//              unsigned line;
+//	      
+//              bool first=true;
+//              char   *realname(0);
+//              int     status;
+//	      
+//              bool found = bfd_find_nearest_line(ibfd, text, symtab, offset, &file, &func, &line);
+//	      
+//              if ( found && file)
+//                {
+//                  do
+//                    {
+//                      // from http://gcc.gnu.org/onlinedocs/libstdc++/manual/ext_demangling.html
+//                      realname = abi::__cxa_demangle(func ? func : info.dli_sname, 0, 0, &status);
+//                      if ( realname )
+//                        {
+//                          if (print)
+//                            fprintf(stderr,"%s : %s (%s,%u)\n",first ? "  in function" : "  included from", realname, file, line);
+//                          else
+//                            msg << ( first ? "  in function" : "  included from" ) << " : " << realname << " (" << file << ":" << line << ")\n";
+//                        }
+//                      else
+//                        {
+//                          if (print)
+//                            fprintf(stderr,"%s : %s (%s,%u)\n", first ? "  in function" : "  included from", func ? func : info.dli_sname, file, line);
+//                          else
+//                            msg << ( first ? "  in function" : "  included from" ) << " : " << ( func ? func : info.dli_sname ) << " (" << file << ":" << line << ")\n";
+//                        }
+//                      free(realname);
+//		      
+//                      found = bfd_find_inliner_info (ibfd, &file, &func, &line);
+//                      first=false;
+//                    }
+//                  while(found);
+//                }
+//            }
+//          if (print)
+//            fprintf(stderr,"  in library : %s",info.dli_fname);
+//          else
+//            msg << "  in library : " << info.dli_fname;
+//          bfd_close(ibfd);
+//        }
     }
   }
 }
