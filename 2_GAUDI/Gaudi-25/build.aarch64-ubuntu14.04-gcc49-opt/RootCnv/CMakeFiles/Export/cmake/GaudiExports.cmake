# Generated by CMake 2.8.12.2

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget GaudiPluginService listcomponents Test_GaudiPluginService_UseCases GaudiKernel DirSearchPath_test test_SerializeSTL PathResolver_test test_GaudiTime test_GaudiTiming Parsers_test Memory_test test_headers_build Gaudi GaudiUtilsLib testXMLFileCatalogWrite testXMLFileCatalogRead GaudiAlgLib GaudiPythonLib GPyTest GaudiGSLLib IntegralInTest DerivativeTest 2DoubleFuncTest GSLAdaptersTest PFuncTest ExceptionsTest SimpleFuncTest 3DoubleFuncTest InterpTest Integral1Test RootCnvLib gaudi_merge extract_event GaudiExamplesLib Allocator GaudiMPLib genconf)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)

# Create imported target GaudiPluginService
add_library(GaudiPluginService SHARED IMPORTED)

# Create imported target listcomponents
add_executable(listcomponents IMPORTED)

# Create imported target Test_GaudiPluginService_UseCases
add_executable(Test_GaudiPluginService_UseCases IMPORTED)

# Create imported target GaudiKernel
add_library(GaudiKernel SHARED IMPORTED)

# Create imported target DirSearchPath_test
add_executable(DirSearchPath_test IMPORTED)

# Create imported target test_SerializeSTL
add_executable(test_SerializeSTL IMPORTED)

# Create imported target PathResolver_test
add_executable(PathResolver_test IMPORTED)

# Create imported target test_GaudiTime
add_executable(test_GaudiTime IMPORTED)

# Create imported target test_GaudiTiming
add_executable(test_GaudiTiming IMPORTED)

# Create imported target Parsers_test
add_executable(Parsers_test IMPORTED)

# Create imported target Memory_test
add_executable(Memory_test IMPORTED)

# Create imported target test_headers_build
add_executable(test_headers_build IMPORTED)

# Create imported target Gaudi
add_executable(Gaudi IMPORTED)

# Create imported target GaudiUtilsLib
add_library(GaudiUtilsLib SHARED IMPORTED)

# Create imported target testXMLFileCatalogWrite
add_executable(testXMLFileCatalogWrite IMPORTED)

# Create imported target testXMLFileCatalogRead
add_executable(testXMLFileCatalogRead IMPORTED)

# Create imported target GaudiAlgLib
add_library(GaudiAlgLib SHARED IMPORTED)

# Create imported target GaudiPythonLib
add_library(GaudiPythonLib SHARED IMPORTED)

# Create imported target GPyTest
add_library(GPyTest SHARED IMPORTED)

# Create imported target GaudiGSLLib
add_library(GaudiGSLLib SHARED IMPORTED)

# Create imported target IntegralInTest
add_executable(IntegralInTest IMPORTED)

# Create imported target DerivativeTest
add_executable(DerivativeTest IMPORTED)

# Create imported target 2DoubleFuncTest
add_executable(2DoubleFuncTest IMPORTED)

# Create imported target GSLAdaptersTest
add_executable(GSLAdaptersTest IMPORTED)

# Create imported target PFuncTest
add_executable(PFuncTest IMPORTED)

# Create imported target ExceptionsTest
add_executable(ExceptionsTest IMPORTED)

# Create imported target SimpleFuncTest
add_executable(SimpleFuncTest IMPORTED)

# Create imported target 3DoubleFuncTest
add_executable(3DoubleFuncTest IMPORTED)

# Create imported target InterpTest
add_executable(InterpTest IMPORTED)

# Create imported target Integral1Test
add_executable(Integral1Test IMPORTED)

# Create imported target RootCnvLib
add_library(RootCnvLib SHARED IMPORTED)

# Create imported target gaudi_merge
add_executable(gaudi_merge IMPORTED)

# Create imported target extract_event
add_executable(extract_event IMPORTED)

# Create imported target GaudiExamplesLib
add_library(GaudiExamplesLib SHARED IMPORTED)

# Create imported target Allocator
add_executable(Allocator IMPORTED)

# Create imported target GaudiMPLib
add_library(GaudiMPLib SHARED IMPORTED)

# Create imported target genconf
add_executable(genconf IMPORTED)

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/GaudiExports-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
