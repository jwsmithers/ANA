Wed Jun 11 17:56:17.419401221 CEST 2014
Testing CORAL from current build (NOT from an installed release)
Using /home/avalassi/CORAL/CORAL_ATLAS
CORAL_DBLOOKUP_PATH=/afs/cern.ch/sw/lcg/app/pool/db
CORAL_AUTH_PATH=/afs/cern.ch/sw/lcg/app/pool/db
CMTCONFIG is x86_64-slc6-gcc47-opt
Using LCG:    67b
Using LCGCMT: /afs/cern.ch/sw/lcg/app/releases/LCGCMT/LCGCMT_67b
Using Boost:  /afs/cern.ch/sw/lcg/app/releases/LCGCMT/LCGCMT_67b/LCG_Settings/../../../../../external/Boost/1.53.0_python2.7/x86_64-slc6-gcc47-opt
Using Python: /afs/cern.ch/sw/lcg/app/releases/LCGCMT/LCGCMT_67b/LCG_Settings/../../../../../external/Python/2.7.3/x86_64-slc6-gcc47-opt
Using CORAL:  /home/avalassi/CORAL/CORAL_ATLAS/src
Using ROOT:   
Using COOL:   
*******************************************************************
TNS_ADMIN is: /afs/cern.ch/sw/lcg/app/releases/LCGCMT/LCGCMT_67b/LCG_Settings/../../../../../external/oracle/11.2.0.3.0/x86_64-slc6-gcc47-opt/admin
python ./CoralAccess/testCoralServer.py Fac 1ses defOut
+++ CORALSERVER TEST +++ Got the PyCoral connection service
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService2 factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialPeriod 1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialTimeOut 3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionTimeOut 0
+++ CORALSERVER TEST +++ Connection service has been configured
+++ CORALSERVER TEST +++ Connect R/O to: coral_TEST://SFac&COOL-Oracle-sftnight
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} The connection pool automatic cleanup thread is currently explicitly disabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Loading default plugin for coral::IRelationalService: CORAL/Services/RelationalService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/RelationalService factory from RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "coral" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "frontier" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "mysql" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "oracle" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "sqlite" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "coral" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "frontier" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "mysql" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "oracle" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "sqlite" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/coral factory from CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} CoralAccess monitoring file: /home/avalassi/CORAL/CORAL_ATLAS/src/logs/CORAL_SERVER/CoralAccess/client/clientLog_Fac.csv
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Connect to coral_TEST://SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server technology: coral
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server protocol:   TEST
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server host:       SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server port:       0
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode...
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService2 component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} ConnectionServiceConfiguration::setConnectionTimeOut 0
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/CoralServerFacade factory from CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Disable connection sharing
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode... DONE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New connection to service "coral_TEST://SFac" with connectionID=C#1 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::ILookupService: CORAL/Services/XMLLookupService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLLookupService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLLookupService factory from XMLLookupService library
Data source lookup using /afs/cern.ch/sw/lcg/app/pool/db/dblookup.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/oracle factory from OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::IAuthenticationService: CORAL/Services/XMLAuthenticationService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLAuthenticationService factory from XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/XMLAuthenticationService} Authentication using /afs/cern.ch/sw/lcg/app/pool/db/authentication.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#2 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#2(C#2.s#1) started on connectionID=C#2 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#1(C#1.s#1) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a R/O session
+++ CORALSERVER TEST +++ Got a schema
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: sleep 1s before readonly transactions...
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: check last DDL using 'select /*+ INDEX(o I_OBJ2) */ o.name as TABLE_NAME, to_char((sysdate-o.mtime)*86400) as SECONDS_SINCE_LASTDDL from sys.user$ u, sys.obj$ o where u.name=:OWNER and o.owner#=u.user# and o.type#=2 and (sysdate-o.mtime)*86400<=2 order by o.mtime desc' where [OWNER (string) : LCG_COOL_NIGHTLY]
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Fetched tables in the schema
+++ CORALSERVER TEST +++ Formatted the output buffer
+++ CORALSERVER TEST +++ Execute test query for the 1st time
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Retrieved 20 rows
OK
+++ CORALSERVER TEST +++ Release the cursor
+++ CORALSERVER TEST +++ Release the query
+++ CORALSERVER TEST +++ Execute test query for the 2nd time
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Retrieved 20 rows
OK
+++ CORALSERVER TEST +++ Release the cursor
+++ CORALSERVER TEST +++ Release the query
+++ CORALSERVER TEST +++ Sleep a bit
+++ CORALSERVER TEST +++ Slept a bit
+++ CORALSERVER TEST +++ Exiting
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#1(C#1.s#1) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#2(C#2.s#1) will be ended on connectionID=C#2
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#2 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection to service "coral_TEST://SFac" with connectionID=C#1 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Deleting the ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Deleting the ConnectionPool
 == =TIMER (CLIENT) 0.47user 0.08system 4.24elapsed 13%CPU
*******************************************************************
Wed Jun 11 17:56:26.228098753 CEST 2014
python ./CoralAccess/testCoralServer.py Fac 1ses noDefOut
+++ CORALSERVER TEST +++ Got the PyCoral connection service
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService2 factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialPeriod 1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialTimeOut 3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionTimeOut 0
+++ CORALSERVER TEST +++ Connection service has been configured
+++ CORALSERVER TEST +++ Connect R/O to: coral_TEST://SFac&COOL-Oracle-sftnight
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} The connection pool automatic cleanup thread is currently explicitly disabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Loading default plugin for coral::IRelationalService: CORAL/Services/RelationalService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/RelationalService factory from RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "coral" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "frontier" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "mysql" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "oracle" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "sqlite" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "coral" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "frontier" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "mysql" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "oracle" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "sqlite" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/coral factory from CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} CoralAccess monitoring file: /home/avalassi/CORAL/CORAL_ATLAS/src/logs/CORAL_SERVER/CoralAccess/client/clientLog_Fac.csv
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Connect to coral_TEST://SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server technology: coral
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server protocol:   TEST
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server host:       SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server port:       0
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode...
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService2 component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} ConnectionServiceConfiguration::setConnectionTimeOut 0
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/CoralServerFacade factory from CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Disable connection sharing
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode... DONE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New connection to service "coral_TEST://SFac" with connectionID=C#1 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::ILookupService: CORAL/Services/XMLLookupService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLLookupService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLLookupService factory from XMLLookupService library
Data source lookup using /afs/cern.ch/sw/lcg/app/pool/db/dblookup.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/oracle factory from OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::IAuthenticationService: CORAL/Services/XMLAuthenticationService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLAuthenticationService factory from XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/XMLAuthenticationService} Authentication using /afs/cern.ch/sw/lcg/app/pool/db/authentication.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#2 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#2(C#2.s#1) started on connectionID=C#2 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#1(C#1.s#1) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a R/O session
+++ CORALSERVER TEST +++ Got a schema
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: sleep 1s before readonly transactions...
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: check last DDL using 'select /*+ INDEX(o I_OBJ2) */ o.name as TABLE_NAME, to_char((sysdate-o.mtime)*86400) as SECONDS_SINCE_LASTDDL from sys.user$ u, sys.obj$ o where u.name=:OWNER and o.owner#=u.user# and o.type#=2 and (sysdate-o.mtime)*86400<=2 order by o.mtime desc' where [OWNER (string) : LCG_COOL_NIGHTLY]
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Fetched tables in the schema
+++ CORALSERVER TEST +++ Formatted the output buffer
+++ CORALSERVER TEST +++ Execute test query for the 1st time
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Retrieved 20 rows
OK
+++ CORALSERVER TEST +++ Release the cursor
+++ CORALSERVER TEST +++ Release the query
+++ CORALSERVER TEST +++ Execute test query for the 2nd time
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Retrieved 20 rows
OK
+++ CORALSERVER TEST +++ Release the cursor
+++ CORALSERVER TEST +++ Release the query
+++ CORALSERVER TEST +++ Sleep a bit
+++ CORALSERVER TEST +++ Slept a bit
+++ CORALSERVER TEST +++ Exiting
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#1(C#1.s#1) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#2(C#2.s#1) will be ended on connectionID=C#2
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#2 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection to service "coral_TEST://SFac" with connectionID=C#1 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Deleting the ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Deleting the ConnectionPool
 == =TIMER (CLIENT) 0.48user 0.08system 4.20elapsed 13%CPU
*******************************************************************
Wed Jun 11 17:56:30.453122146 CEST 2014
python ./CoralAccess/testCoralServer.py Fac 2ses defOut
+++ CORALSERVER TEST +++ Got the PyCoral connection service
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService2 factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialPeriod 1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialTimeOut 3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionTimeOut 0
+++ CORALSERVER TEST +++ Connection service has been configured
+++ CORALSERVER TEST +++ Connect R/O to: coral_TEST://SFac&COOL-Oracle-sftnight
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} The connection pool automatic cleanup thread is currently explicitly disabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Loading default plugin for coral::IRelationalService: CORAL/Services/RelationalService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/RelationalService factory from RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "coral" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "frontier" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "mysql" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "oracle" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "sqlite" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "coral" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "frontier" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "mysql" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "oracle" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "sqlite" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/coral factory from CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} CoralAccess monitoring file: /home/avalassi/CORAL/CORAL_ATLAS/src/logs/CORAL_SERVER/CoralAccess/client/clientLog_Fac.csv
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Connect to coral_TEST://SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server technology: coral
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server protocol:   TEST
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server host:       SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server port:       0
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode...
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService2 component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} ConnectionServiceConfiguration::setConnectionTimeOut 0
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/CoralServerFacade factory from CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Disable connection sharing
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode... DONE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New connection to service "coral_TEST://SFac" with connectionID=C#1 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::ILookupService: CORAL/Services/XMLLookupService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLLookupService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLLookupService factory from XMLLookupService library
Data source lookup using /afs/cern.ch/sw/lcg/app/pool/db/dblookup.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/oracle factory from OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::IAuthenticationService: CORAL/Services/XMLAuthenticationService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLAuthenticationService factory from XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/XMLAuthenticationService} Authentication using /afs/cern.ch/sw/lcg/app/pool/db/authentication.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#2 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#2(C#2.s#1) started on connectionID=C#2 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#1(C#1.s#1) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a R/O session
+++ CORALSERVER TEST +++ Got a schema
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: sleep 1s before readonly transactions...
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: check last DDL using 'select /*+ INDEX(o I_OBJ2) */ o.name as TABLE_NAME, to_char((sysdate-o.mtime)*86400) as SECONDS_SINCE_LASTDDL from sys.user$ u, sys.obj$ o where u.name=:OWNER and o.owner#=u.user# and o.type#=2 and (sysdate-o.mtime)*86400<=2 order by o.mtime desc' where [OWNER (string) : LCG_COOL_NIGHTLY]
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Fetched tables in the schema
+++ CORALSERVER TEST +++ Formatted the output buffer
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#3 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#4(C#3.s#1) started on connectionID=C#3 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#3(C#1.s#2) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a 2nd session
+++ CORALSERVER TEST +++ Got a schema
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Execute test query for the 1st time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Execute test query for the 2nd time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Sleep a bit
+++ CORALSERVER TEST +++ Slept a bit
+++ CORALSERVER TEST +++ Exiting
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#3(C#1.s#2) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#4(C#3.s#1) will be ended on connectionID=C#3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#3 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#1(C#1.s#1) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#2(C#2.s#1) will be ended on connectionID=C#2
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#2 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection to service "coral_TEST://SFac" with connectionID=C#1 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Deleting the ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Deleting the ConnectionPool
 == =TIMER (CLIENT) 0.51user 0.07system 4.32elapsed 13%CPU
*******************************************************************
Wed Jun 11 17:56:34.789285189 CEST 2014
python ./CoralAccess/testCoralServer.py Fac 2ses noDefOut
+++ CORALSERVER TEST +++ Got the PyCoral connection service
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService2 factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialPeriod 1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialTimeOut 3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionTimeOut 0
+++ CORALSERVER TEST +++ Connection service has been configured
+++ CORALSERVER TEST +++ Connect R/O to: coral_TEST://SFac&COOL-Oracle-sftnight
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} The connection pool automatic cleanup thread is currently explicitly disabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Loading default plugin for coral::IRelationalService: CORAL/Services/RelationalService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/RelationalService factory from RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "coral" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "frontier" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "mysql" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "oracle" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "sqlite" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "coral" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "frontier" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "mysql" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "oracle" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "sqlite" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/coral factory from CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} CoralAccess monitoring file: /home/avalassi/CORAL/CORAL_ATLAS/src/logs/CORAL_SERVER/CoralAccess/client/clientLog_Fac.csv
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Connect to coral_TEST://SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server technology: coral
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server protocol:   TEST
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server host:       SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server port:       0
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode...
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService2 component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} ConnectionServiceConfiguration::setConnectionTimeOut 0
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/CoralServerFacade factory from CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Disable connection sharing
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode... DONE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New connection to service "coral_TEST://SFac" with connectionID=C#1 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::ILookupService: CORAL/Services/XMLLookupService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLLookupService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLLookupService factory from XMLLookupService library
Data source lookup using /afs/cern.ch/sw/lcg/app/pool/db/dblookup.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/oracle factory from OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::IAuthenticationService: CORAL/Services/XMLAuthenticationService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLAuthenticationService factory from XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/XMLAuthenticationService} Authentication using /afs/cern.ch/sw/lcg/app/pool/db/authentication.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#2 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#2(C#2.s#1) started on connectionID=C#2 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#1(C#1.s#1) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a R/O session
+++ CORALSERVER TEST +++ Got a schema
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: sleep 1s before readonly transactions...
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: check last DDL using 'select /*+ INDEX(o I_OBJ2) */ o.name as TABLE_NAME, to_char((sysdate-o.mtime)*86400) as SECONDS_SINCE_LASTDDL from sys.user$ u, sys.obj$ o where u.name=:OWNER and o.owner#=u.user# and o.type#=2 and (sysdate-o.mtime)*86400<=2 order by o.mtime desc' where [OWNER (string) : LCG_COOL_NIGHTLY]
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Fetched tables in the schema
+++ CORALSERVER TEST +++ Formatted the output buffer
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#3 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#4(C#3.s#1) started on connectionID=C#3 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#3(C#1.s#2) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a 2nd session
+++ CORALSERVER TEST +++ Got a schema
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Execute test query for the 1st time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Execute test query for the 2nd time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Sleep a bit
+++ CORALSERVER TEST +++ Slept a bit
+++ CORALSERVER TEST +++ Exiting
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#3(C#1.s#2) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#4(C#3.s#1) will be ended on connectionID=C#3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#3 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#1(C#1.s#1) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#2(C#2.s#1) will be ended on connectionID=C#2
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#2 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection to service "coral_TEST://SFac" with connectionID=C#1 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Deleting the ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Deleting the ConnectionPool
 == =TIMER (CLIENT) 0.50user 0.07system 4.27elapsed 13%CPU
*******************************************************************
Wed Jun 11 17:56:39.077374011 CEST 2014
python ./CoralAccess/testCoralServer.py Fac 2sesAll defOut
+++ CORALSERVER TEST +++ Got the PyCoral connection service
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService2 factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialPeriod 1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialTimeOut 3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionTimeOut 0
+++ CORALSERVER TEST +++ Connection service has been configured
+++ CORALSERVER TEST +++ Connect R/O to: coral_TEST://SFac&COOL-Oracle-sftnight
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} The connection pool automatic cleanup thread is currently explicitly disabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Loading default plugin for coral::IRelationalService: CORAL/Services/RelationalService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/RelationalService factory from RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "coral" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "frontier" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "mysql" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "oracle" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "sqlite" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "coral" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "frontier" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "mysql" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "oracle" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "sqlite" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/coral factory from CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} CoralAccess monitoring file: /home/avalassi/CORAL/CORAL_ATLAS/src/logs/CORAL_SERVER/CoralAccess/client/clientLog_Fac.csv
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Connect to coral_TEST://SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server technology: coral
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server protocol:   TEST
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server host:       SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server port:       0
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode...
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService2 component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} ConnectionServiceConfiguration::setConnectionTimeOut 0
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/CoralServerFacade factory from CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Disable connection sharing
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode... DONE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New connection to service "coral_TEST://SFac" with connectionID=C#1 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::ILookupService: CORAL/Services/XMLLookupService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLLookupService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLLookupService factory from XMLLookupService library
Data source lookup using /afs/cern.ch/sw/lcg/app/pool/db/dblookup.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/oracle factory from OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::IAuthenticationService: CORAL/Services/XMLAuthenticationService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLAuthenticationService factory from XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/XMLAuthenticationService} Authentication using /afs/cern.ch/sw/lcg/app/pool/db/authentication.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#2 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#2(C#2.s#1) started on connectionID=C#2 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#1(C#1.s#1) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a R/O session
+++ CORALSERVER TEST +++ Got a schema
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: sleep 1s before readonly transactions...
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: check last DDL using 'select /*+ INDEX(o I_OBJ2) */ o.name as TABLE_NAME, to_char((sysdate-o.mtime)*86400) as SECONDS_SINCE_LASTDDL from sys.user$ u, sys.obj$ o where u.name=:OWNER and o.owner#=u.user# and o.type#=2 and (sysdate-o.mtime)*86400<=2 order by o.mtime desc' where [OWNER (string) : LCG_COOL_NIGHTLY]
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Fetched tables in the schema
+++ CORALSERVER TEST +++ Formatted the output buffer
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#3 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#4(C#3.s#1) started on connectionID=C#3 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#3(C#1.s#2) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a 2nd session
+++ CORALSERVER TEST +++ Got a schema
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Execute test query for the 1st time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Execute test query for the 2nd time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Defined the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Sleep a bit
+++ CORALSERVER TEST +++ Slept a bit
+++ CORALSERVER TEST +++ Exiting
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#3(C#1.s#2) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#4(C#3.s#1) will be ended on connectionID=C#3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#3 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#1(C#1.s#1) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#2(C#2.s#1) will be ended on connectionID=C#2
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#2 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection to service "coral_TEST://SFac" with connectionID=C#1 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Deleting the ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Deleting the ConnectionPool
 == =TIMER (CLIENT) 0.50user 0.08system 4.27elapsed 13%CPU
*******************************************************************
Wed Jun 11 17:56:43.373580244 CEST 2014
python ./CoralAccess/testCoralServer.py Fac 2sesAll noDefOut
+++ CORALSERVER TEST +++ Got the PyCoral connection service
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/ConnectionService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/ConnectionService2 factory from ConnectionService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialPeriod 1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionRetrialTimeOut 3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} ConnectionServiceConfiguration::setConnectionTimeOut 0
+++ CORALSERVER TEST +++ Connection service has been configured
+++ CORALSERVER TEST +++ Connect R/O to: coral_TEST://SFac&COOL-Oracle-sftnight
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} The connection pool automatic cleanup thread is currently explicitly disabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Loading default plugin for coral::IRelationalService: CORAL/Services/RelationalService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/RelationalService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/RelationalService factory from RelationalService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "coral" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "frontier" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "mysql" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "oracle" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Found plugin for RDBMS technology "sqlite" with native implementation
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "coral" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "frontier" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "mysql" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "oracle" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/RelationalService} Default implementation for RDBMS technology "sqlite" is native
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/coral component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/coral factory from CoralAccess library
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} CoralAccess monitoring file: /home/avalassi/CORAL/CORAL_ATLAS/src/logs/CORAL_SERVER/CoralAccess/client/clientLog_Fac.csv
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Connect to coral_TEST://SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server technology: coral
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server protocol:   TEST
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server host:       SFac
YYYY-MMM-DD hh:mm:ss.nnn [ALL] {CORAL/RelationalPlugins/coral} Coral server port:       0
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode...
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/ConnectionService2 component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection sharing is enabled
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection pool cleanup period (default value) is 10 seconds
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Creating a ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} ConnectionServiceConfiguration::setConnectionTimeOut 0
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/CoralServerFacade component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/CoralServerFacade factory from CoralServer library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Disable connection sharing
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/coral} *** WARNING! Create connection in TEST mode... DONE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New connection to service "coral_TEST://SFac" with connectionID=C#1 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::ILookupService: CORAL/Services/XMLLookupService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLLookupService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLLookupService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLLookupService factory from XMLLookupService library
Data source lookup using /afs/cern.ch/sw/lcg/app/pool/db/dblookup.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/RelationalPlugins/oracle component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/RelationalPlugins/oracle factory from OracleAccess library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Loading default plugin for coral::IAuthenticationService: CORAL/Services/XMLAuthenticationService
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager creating CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager needs to load CORAL/Services/XMLAuthenticationService component
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {PluginManager} PluginManager loaded CORAL/Services/XMLAuthenticationService factory from XMLAuthenticationService library
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/XMLAuthenticationService} Authentication using /afs/cern.ch/sw/lcg/app/pool/db/authentication.xml file
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#2 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#2(C#2.s#1) started on connectionID=C#2 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#1(C#1.s#1) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a R/O session
+++ CORALSERVER TEST +++ Got a schema
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: sleep 1s before readonly transactions...
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} CORAL_TESTSUITE_SLEEPFOR01466 is set: check last DDL using 'select /*+ INDEX(o I_OBJ2) */ o.name as TABLE_NAME, to_char((sysdate-o.mtime)*86400) as SECONDS_SINCE_LASTDDL from sys.user$ u, sys.obj$ o where u.name=:OWNER and o.owner#=u.user# and o.type#=2 and (sysdate-o.mtime)*86400<=2 order by o.mtime desc' where [OWNER (string) : LCG_COOL_NIGHTLY]
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Fetched tables in the schema
+++ CORALSERVER TEST +++ Formatted the output buffer
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New connection to service "lcg_cool_nightly" with connectionID=C#3 has been connected
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} OCIServerVersion is 11.1.0.0.0. This may be a symptom of Oracle bug 9226591 (bug #102232). Try to retrieve OCIServerVersion again.
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Disable plan baseline use by ALTER SESSION SET OPTIMIZER_USE_SQL_PLAN_BASELINES=FALSE
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} Will not disable optimizer dynamic sampling (CORAL_ORA_DISABLE_OPT_DYN_SAMP is not set)
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/RelationalPlugins/oracle} CORAL_ORA_SKIP_TRANS_READONLY is not set: this session will use OCI serializable read-only transactions
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} New user session with sessionID=S#4(C#3.s#1) started on connectionID=C#3 to service "lcg_cool_nightly" for user "lcg_cool_nightly" in read-only mode
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} New user session with sessionID=S#3(C#1.s#2) started on connectionID=C#1 to service "coral_TEST://SFac" for user "" in read-only mode
+++ CORALSERVER TEST +++ Got a 2nd session
+++ CORALSERVER TEST +++ Got a schema
+++ CORALSERVER TEST +++ ------------------------------------------------------
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
YYYY-MMM-DD hh:mm:ss.nnn [WRN] {CORAL/RelationalPlugins/oracle} No recent DDL: no need to sleep 1s to avoid ORA-01466
+++ CORALSERVER TEST +++ Execute test query for the 1st time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Execute test query for the 2nd time
+++ CORALSERVER TEST +++ Got a query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a 2nd query
+++ CORALSERVER TEST +++ Did NOT define the output
+++ CORALSERVER TEST +++ Got a cursor
+++ CORALSERVER TEST +++ Got a 2nd cursor
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 0], [x (float) : 0]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 1], [x (float) : 1.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 2], [x (float) : 2.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 3], [x (float) : 3.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 4], [x (float) : 4.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 5], [x (float) : 5.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 6], [x (float) : 6.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 7], [x (float) : 7.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 8], [x (float) : 8.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 9], [x (float) : 9.9]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 10], [x (float) : 11]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 11], [x (float) : 12.1]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 12], [x (float) : 13.2]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 13], [x (float) : 14.3]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 14], [x (float) : 15.4]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 15], [x (float) : 16.5]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 16], [x (float) : 17.6]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 17], [x (float) : 18.7]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 18], [x (float) : 19.8]
+++ CORALSERVER TEST +++ Cursor #1: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #2: current row: [ID (int) : 19], [x (float) : 20.9]
+++ CORALSERVER TEST +++ Cursor #1 - retrieved 20 rows
+++ CORALSERVER TEST +++ Cursor #2 - retrieved 20 rows
OK
OK
+++ CORALSERVER TEST +++ Sleep a bit
+++ CORALSERVER TEST +++ Slept a bit
+++ CORALSERVER TEST +++ Exiting
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#3(C#1.s#2) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#4(C#3.s#1) will be ended on connectionID=C#3
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#3 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} User session with sessionID=S#1(C#1.s#1) will be ended on connectionID=C#1
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} User session with sessionID=S#2(C#2.s#1) will be ended on connectionID=C#2
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Connection to service "lcg_cool_nightly" with connectionID=C#2 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Connection to service "coral_TEST://SFac" with connectionID=C#1 will be disconnected
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService} Deleting the ConnectionPool
YYYY-MMM-DD hh:mm:ss.nnn [INF] {CORAL/Services/ConnectionService2} Deleting the ConnectionPool
 == =TIMER (CLIENT) 0.49user 0.08system 4.25elapsed 13%CPU
*******************************************************************
Wed Jun 11 17:56:47.648060679 CEST 2014
