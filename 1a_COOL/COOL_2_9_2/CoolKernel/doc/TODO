Good points by Marco:
- Since storeObject accepts an IRecord rather than a Record, I cannot
  be sure that the user IRecord contains validated data, hence I must 
  do the check in COOL before storing it. Andrea: in any case we always 
  do at least one copy of this data, the internal COOL check before
  calling CORAL should be done there (and only there).
- Record is not very natural for the database attributes because it 
  presently represents different rows of a table, rather than different
  columns of one row of a table. Andrea: yes, however for folder attributes
  the Record is better because there a folder is indeed one row in the
  node table; and also, maybe one day we could have one row per database
  in a COOL_DATABASES table rather than one table per database, and this
  could also mean that some properties could be numeric rather than strings.

Still TO DO?
- more tests of CoolKernel (including isNull mechanisms)
- does a default Record have NULL fields or default (eg 0, "") values?
- RecordSet class (with shared IRecordSpecification): like a result set

Various options considered (and eventually discarded) in random order:
- define a common RecordBase for Record and ConstRecordAdapter
- make ConstFieldAdapter a private class of Record
- add template<T> StorageType::validate(T& value)
