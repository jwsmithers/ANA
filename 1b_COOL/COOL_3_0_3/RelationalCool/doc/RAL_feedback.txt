==============================================================================
PENDING PROBLEMS
==============================================================================
* Altering table to add foreign key constraint should be possible a posteriori

The functionality needs to be added to IRelationalTableSchemaEditor
(or should be moved from IEditableTableDescription).

------------------------------------------------------------------------------
* Need option to switch off /tmp/pool.sql.log

This huge file is extremely useful for debugging.
But it may decrease performance. Is it possible to switch it off?

------------------------------------------------------------------------------
* POOL_2_0_1 does not translate correctly unsigned long for MyODBC

In POOL_2_0_0 I got the table created with UNSIGNED BIGINT.
In POOL_2_0_1 the type is missing and SQL fails.

------------------------------------------------------------------------------
* Tablespace definition via the API

This is presently only possible via the job options or environment
variables at the domain level. This should be possible ALSO at the table
level (and at the session level) through the API.

------------------------------------------------------------------------------
* Support for insert/select statements

Support 'insert into xxx select * from yyy'.
Needed by Sven for simpler tagging.

------------------------------------------------------------------------------
* MySQL plugin internal emulation of bulk retrieval

The MySQL performance should be better understood and optimized.
If there is a problem with missing bulk operations (so that the choice
is either to go one by one or retrieve ALL rows in a query), it may be
useful to improve the emulation by doing the following
- allow the users to specify a prefetch buffer, eg 10k
- issue a read only transaction
- issue the select statement using an order by clause (either the one
  provided by the user, or one on the PK of the table, or throw an
  exception if none exists and a prefetch buffer is specified)
- retrieve the first 10k rows
- retrieve the next 10k rows and so on
The read only transaction and order by clause are to be screened behind
the implementation and ensure that the fetching order is reproducible.

------------------------------------------------------------------------------
* MySQL API direct implementation

Priority low. May be a useful alternative to ODBC eventually.

------------------------------------------------------------------------------
* Switch to non-scrollable cursors in the MySQL plugin

Internal change: the default MySQL plugin impleentation should use 
forward-only cursors. Although this is not guaranteed to cause a major
performance improvement, this should be tested as it had a major
impact for Oracle (an dthe MySQL implementation is still relatively slow).

------------------------------------------------------------------------------
* BLOB support in AttributeList and RAL

The user should be able to store/retrieve as a database BLOB a raw binary 
memory buffer of a given size.

------------------------------------------------------------------------------
* Query output type definition

The defineOutput() method should not require that the size of the 
AttributeListSpecification is the same as the one of the output list 
as defined with the successive calls to the addToOutput() method.
It should be enough to specify via defineOutput an AttributeListSpecification
that is a superset (ie larger) than all columns queried.

------------------------------------------------------------------------------
* MySQL plugin messaging

In DEBUG mode it should print out the statement that was prepared
in prepareStatement(), just like for Oracle.

------------------------------------------------------------------------------
* MySQL plugin support for Windows.

Presently it is only available under Linux.

------------------------------------------------------------------------------
* NULL value insertion.

Inserting NULL values should be done explicitly.

The best solution would be to modify AttributeList so that each
attribute in the list has the optionof being NULL/undefined. This 
could then be used transaparently in RAL for both insertion and retrieval.

------------------------------------------------------------------------------
* String size specification

The user should be able to specify (and retrieve in the table description) 
for a string column its maximum size and whether the latter is variable 
or fixed. 

Additionally, RAL should automatically store strings as CLOBs if they are
larger than the maximum VARCHAR size.

------------------------------------------------------------------------------
* MySQL plugin handling of multiply-bound variables

The user should be able to use the same syntax "where xx < :a and :a < yy"
as for Oracle, with a bind variable appearing twice. RAL should take care
of binding the variable twice.

------------------------------------------------------------------------------
* MySQL plugin handling of bind variable names

The user should be able to use the same syntax "where :a<yy" as for Oracle.
Presently this does not work because this is replaced by "?", interpreting
this as the binding of a variable called "a<yy" (ie presently one has to 
write ":a <yy" instead of ":a<yy", taking care to leave a space).
RAL should interpret as the bind variable name only letters, numbers and 
the "_" character. Any character other than these (eg +,-,<,>,=) should 
indicate that the bind variable name is over.

------------------------------------------------------------------------------
* MySQL plugin handling of bind variable order

Presently the MySQL plugin assumes that the order in which attributes
are specified in the AttrinbuteList for a WHERE clause is the same as
the order in which the variables are bound. This should be changed
as it leads to errors that are difficult to trace and debug and
may go unnoticed. The MYSQL plugin should behave like Oracle OCI
and crosscheck names of variables (this would also solve the problem
of doubly dound variable names).

------------------------------------------------------------------------------
* SQL_TRACE

The user should be able to enable SQL_TRACE in a session.
For Oracle, this should issue
  alter session set events '10046 trace name context forever, level 12'
Ideally this should be a session property (method of IRelationalSession).
Initially, this can be a domain property, set via the seal opts or
one of the 'hidden' environment variables, eg POOL_ORA_SQL_TRACE.

------------------------------------------------------------------------------
* Support for SYSDATE date computed by the server

1. The user should be able to retrieve into C++ the date on the server.
There should be a simple method to retrieve only the date. This would issue: 
  Oracle (systimestamp has higher precision - microseconds instead of seconds)
    select sysdate from dual;
    select systimestamp from dual;
    select current_timestamp from dual;
  MySQL
    select current_timestamp;
The ANSI version current_timestamp works for both but gives different results.
For instance, add a method serverCurrentTimestamp() in the IRelationalSession?
Priority: high.

2. The user should be able to retrieve the date when retrieving data 
from any table. This would issue for instance
  Oracle
    select [user columns], current_timestamp from [user table];
  MySQL
    select [user columns], current_timestamp from [user table];
For instance, define a reserved keyword CURRENT_TIMESTAMP which can be used
in the IRelationalQuery::addToOutputList() method, without executing the
cross-check whether this exists in the table because it does not?
Priority: lower (if you can at least get the serverCurrentTimestamp
into C++, you can always do this in two steps).

3. The user should be able to insert the date into a column of a table.
This would issue for instance
    insert [user values], current_timestamp into ...;
Priority: lower (if you can at least get the serverCurrentTimestamp
into C++, you can always do this in two steps).

PS: actually the priority may be a bit higher.
We need to COMPARE date values, presently we are comparing strings...

Note: presently COOL is working around this problem by using the UPDATE
clause, the only place where free SQL can be used: for instance,
- insert a dummy value into a table
- update the table with the system date
- read it back from the table to know what is the time on the server

------------------------------------------------------------------------------
* Support for seal::Time and native Oracle DATE

The user should be able to create table with DATE columns.
If possible, seal::Time should also be supported in 
AttributeList and mapped to DATE SQL types by default.

------------------------------------------------------------------------------
* ANALYZE TABLE

The user should be able to analyze a table from the C++.
Although this is an administration level operation, it is essential 
for fast tests where one wants to create a table, insert data and 
select from the table at the same time. The table must be analyzed 
after data have been inserted and before issuing the select query.

For instance, add a method analyzeTable to IRelationalTable?
This would issue
  analyze table xxx compute statistics (Oracle)
  analyze table (MySQL)

------------------------------------------------------------------------------
* ORA-01466

Oracle readonly transaction uses READ ONLY rather than SERIALIZABLE.
If a table is created and immediately queried, this causes an ORA-01466 error.
This was reported to Oracle, but their answer is that this is a feature
that needs to be better documented, not a bug that will be fixed,
and the workaround is to wait for a few seconds.

Given this situation, I would suggest the following workaround to apply 
within RAL, which would at least prevent the problem from happening within
the same active session: an active OracleSession instance should keep
track of the last date at which it issued any kind of DDL statements.
Whenever a read-only transaction is issued, RAL itself should check 
whether at least N seconds have elapsed since the last DDL: if not,

------------------------------------------------------------------------------
* Read only transactions (more generally)

We should review whether Oracle READ ONLY transactions are really
what we need for "read only" mode. SERIALIZABLE transactions look 
safer and better than readonly, but they may block
concurrent users from running at the same time.

------------------------------------------------------------------------------
* AttributeList copy constructor and assignment operator

AttributeLists behave differently depending on whether they were built
from a reference or a boost shared pointer specification.
The assignment operator is reliable only in the second case. 
The copy constructor gives problems for both.
This was notified to Kuba, Ioannis and Rado.

------------------------------------------------------------------------------
* Multi-threading problems with MySQL/ODBC

I had to disable the -pthread switch on RelationalCool because 
the application hangs (only for MySQL). The circumstances are
difficult to explain exactly: it happens in RalSequence when
I try to drop a table and then recreate it again. It does not 
happen if the table had been dropped using TOra.

The problem had already been mentioned to Rado long ago.
Has this been solved in the meantime (by RAL or by the next ODBC driver)?
[In COOL a workaround is presently used in RelationalCoool/BuildFile]

------------------------------------------------------------------------------
* Problem inserting rows where all values are NULL

Bug: when inserting rows where all values are null, this is translated 
into non-valid SQL:
  INSERT INTO "CONDDB_TEST"."COOLTEST_FOLDERS_SEQ" () VALUES ();
Maybe this has already been fixed?

------------------------------------------------------------------------------
* Partitioning and local indexes

The user should be able to specify that a table should be created
as partitioned and indexese are local. Priority: low.

==============================================================================
PROBLEMS SOLVED
==============================================================================
* Support for 64-bit integer

This type could not be defined in an AttributeList or stored using RAL.

------------------------------------------------------------------------------
* Set clause syntax for MySQL/ODBC in IRelationalTableDataEditor::updateRows

The Oracle plugin required ":bindvariable", MySQL/ODBC required "?".
Now both use ":bindvariable".

------------------------------------------------------------------------------
* Feature with columnNamesAndTypes()

If you insert a column via insertColumn( columnName, typeName )
and then retrieve columnNamesAndTypes(), the types are not guaranteed 
to be the same. For instance, insertColumn for "unsigned long" will 
return an "unsigned long" on MySQL (as the native type can be mapped), 
while it will return "long" on Oracle because this maps to NUMBER(38).
This causes problems if you try to then insert an attribute value via
setValue<type> into the attribute list, pool::attribute_bad_type
will be thrown.

=> Solution: when filling in the table, do not rely on columnNamesAndTypes():
instead, keep a local copy of the C++ mapping in the tables or in the
C++ code! This solves the setValue() problem.

------------------------------------------------------------------------------
* Feature with IRelationalCursor::currentRow()

Also in this case the same problem appears: the attribute list returned 
has a specification that is read from the table description, ie exactly
the same returned by columnNamesAndTypes(). If the previous problem
appeared for setValue(), this appears for getValue(): it is a priory
impossible to know which C++ should be used for getValue(). The only 
safe one is string, but this is not satisfactory!

=> Solution: you must use defineOutput() to specify the required format!

------------------------------------------------------------------------------
* NULL values inserted in MySQL third column (POOL_1_8_0)

This is fixed in the HEAD of ODBCAccess since december 3.
There was a bug with the use of STL vectors: push_back changes
the internal memory addresses of all vector elements.

------------------------------------------------------------------------------
* MyODBC bulk inserter inserts \0-terminated strings

Check by selecting 
  select s, length(s) from COOLTEST_F0001_IOVS;

These two queries gave different results (and only the second works fine!):
  select * from COOLTEST_F0001_IOVS where s='Object 1'; 
  select * from COOLTEST_F0001_IOVS where s='Object 1\0'; 
Fixed in POOL_2_0_2.

------------------------------------------------------------------------------

